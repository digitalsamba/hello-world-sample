name: Deploy Hello World App to Development

on:
  push:
    branches: [dev]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint || echo "No lint command configured - skipping"
        continue-on-error: true
        
      - name: Run tests
        run: npm test
        
      - name: Create test results directory
        run: mkdir -p test-results coverage
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results/
            coverage/
        if: always()
        continue-on-error: true

  build-and-push:
    name: Build and Push Docker Image
    needs: lint-and-test
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
          
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/hello-world-app:dev-${{ github.sha }}
            docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/hello-world-app:development
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=development
          
  deploy-to-development:
    name: Deploy to Development Environment
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Deploy to development server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          port: 22
          script: |
            # Create deployment directory if it doesn't exist
            mkdir -p ${{ secrets.DEPLOY_PATH }}
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Create or update docker-compose.yml
            cat > docker-compose.yml << EOL
            version: '3'
            
            services:
              app:
                image: docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/hello-world-app:dev-${{ github.sha }}
                container_name: hello-world-app-dev
                restart: unless-stopped
                ports:
                  - "${{ secrets.PORT }}:3000"
                environment:
                  - NODE_ENV=development
                  - VIRTUAL_HOST=${{ secrets.DEV_DOMAIN }}
                  - VIRTUAL_PORT=3000
                  - LETSENCRYPT_HOST=${{ secrets.DEV_DOMAIN }}
                  - LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
                volumes:
                  - ${{ secrets.DEPLOY_PATH }}/data:/app/data
                  - ${{ secrets.DEPLOY_PATH }}/logs:/app/logs
                networks:
                  - ${{ secrets.DOCKER_NETWORK }}
            
            networks:
              ${{ secrets.DOCKER_NETWORK }}:
                external: true
            EOL
            
            # Pull the latest image
            docker pull docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/hello-world-app:dev-${{ github.sha }}
            
            # Create directories for persistent data if they don't exist
            mkdir -p ${{ secrets.DEPLOY_PATH }}/data
            mkdir -p ${{ secrets.DEPLOY_PATH }}/logs
            
            # Stop and remove existing containers
            docker-compose down || true
            
            # Start the new container
            docker-compose up -d
            
            # Clean up old images to save space (keep last 5)
            docker image prune -a --filter "label=name=hello-world-app" --filter "until=240h" --force
          
      - name: Verify deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          port: 22
          script: |
            # Wait for the container to be ready
            sleep 15
            
            # Check if the container is running
            if docker ps | grep hello-world-app-dev; then
              echo "Container is running"
              
              # Perform a basic health check
              # First check using local connection on the server
              if curl -s http://localhost:3000 | grep -q "Hello World"; then
                echo "Local health check passed"
              else
                echo "Warning: Local health check did not detect 'Hello World' text"
              fi
              
              # Then check using the domain (this might not work immediately due to DNS propagation)
              echo "Attempting domain health check (may not work immediately due to DNS propagation)"
              if curl -s https://${{ secrets.DEV_DOMAIN }} -k | grep -q "Hello World"; then
                echo "Domain health check passed"
              else
                echo "Warning: Domain health check did not detect 'Hello World' text"
                echo "This might be normal if DNS hasn't propagated or SSL certificate isn't ready yet"
              fi
            else
              echo "Container is not running"
              docker-compose logs
              exit 1
            fi
            
      - name: Post deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment to development was successful!"
            echo "App is now available at https://${{ secrets.DEV_DOMAIN }}"
            echo "Deployment path on server: ${{ secrets.DEPLOY_PATH }}"
          else
            echo "❌ Deployment to development failed."
          fi